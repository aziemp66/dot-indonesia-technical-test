// Code generated by MockGen. DO NOT EDIT.
// Source: internal/modules/task/service/type.go
//
// Generated by this command:
//
//	mockgen -package=mock_service -source=internal/modules/task/service/type.go -destination=mock/service/task_service_mock.go -typed
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	task_model "github.com/aziemp66/dot-indonesia-technical-test/internal/modules/task/model"
	gomock "go.uber.org/mock/gomock"
)

// MockTaskService is a mock of TaskService interface.
type MockTaskService struct {
	ctrl     *gomock.Controller
	recorder *MockTaskServiceMockRecorder
	isgomock struct{}
}

// MockTaskServiceMockRecorder is the mock recorder for MockTaskService.
type MockTaskServiceMockRecorder struct {
	mock *MockTaskService
}

// NewMockTaskService creates a new mock instance.
func NewMockTaskService(ctrl *gomock.Controller) *MockTaskService {
	mock := &MockTaskService{ctrl: ctrl}
	mock.recorder = &MockTaskServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskService) EXPECT() *MockTaskServiceMockRecorder {
	return m.recorder
}

// CreateTask mocks base method.
func (m *MockTaskService) CreateTask(ctx context.Context, userID, title, description, status string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", ctx, userID, title, description, status)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockTaskServiceMockRecorder) CreateTask(ctx, userID, title, description, status any) *MockTaskServiceCreateTaskCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockTaskService)(nil).CreateTask), ctx, userID, title, description, status)
	return &MockTaskServiceCreateTaskCall{Call: call}
}

// MockTaskServiceCreateTaskCall wrap *gomock.Call
type MockTaskServiceCreateTaskCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTaskServiceCreateTaskCall) Return(id string, err error) *MockTaskServiceCreateTaskCall {
	c.Call = c.Call.Return(id, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTaskServiceCreateTaskCall) Do(f func(context.Context, string, string, string, string) (string, error)) *MockTaskServiceCreateTaskCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTaskServiceCreateTaskCall) DoAndReturn(f func(context.Context, string, string, string, string) (string, error)) *MockTaskServiceCreateTaskCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteTask mocks base method.
func (m *MockTaskService) DeleteTask(ctx context.Context, id, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", ctx, id, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockTaskServiceMockRecorder) DeleteTask(ctx, id, userID any) *MockTaskServiceDeleteTaskCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockTaskService)(nil).DeleteTask), ctx, id, userID)
	return &MockTaskServiceDeleteTaskCall{Call: call}
}

// MockTaskServiceDeleteTaskCall wrap *gomock.Call
type MockTaskServiceDeleteTaskCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTaskServiceDeleteTaskCall) Return(arg0 error) *MockTaskServiceDeleteTaskCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTaskServiceDeleteTaskCall) Do(f func(context.Context, string, string) error) *MockTaskServiceDeleteTaskCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTaskServiceDeleteTaskCall) DoAndReturn(f func(context.Context, string, string) error) *MockTaskServiceDeleteTaskCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAllUserTasks mocks base method.
func (m *MockTaskService) GetAllUserTasks(ctx context.Context, userID string) ([]task_model.GetTaskResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUserTasks", ctx, userID)
	ret0, _ := ret[0].([]task_model.GetTaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUserTasks indicates an expected call of GetAllUserTasks.
func (mr *MockTaskServiceMockRecorder) GetAllUserTasks(ctx, userID any) *MockTaskServiceGetAllUserTasksCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUserTasks", reflect.TypeOf((*MockTaskService)(nil).GetAllUserTasks), ctx, userID)
	return &MockTaskServiceGetAllUserTasksCall{Call: call}
}

// MockTaskServiceGetAllUserTasksCall wrap *gomock.Call
type MockTaskServiceGetAllUserTasksCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTaskServiceGetAllUserTasksCall) Return(arg0 []task_model.GetTaskResponse, arg1 error) *MockTaskServiceGetAllUserTasksCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTaskServiceGetAllUserTasksCall) Do(f func(context.Context, string) ([]task_model.GetTaskResponse, error)) *MockTaskServiceGetAllUserTasksCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTaskServiceGetAllUserTasksCall) DoAndReturn(f func(context.Context, string) ([]task_model.GetTaskResponse, error)) *MockTaskServiceGetAllUserTasksCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetTaskByID mocks base method.
func (m *MockTaskService) GetTaskByID(ctx context.Context, id, userID string) (task_model.GetTaskResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskByID", ctx, id, userID)
	ret0, _ := ret[0].(task_model.GetTaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskByID indicates an expected call of GetTaskByID.
func (mr *MockTaskServiceMockRecorder) GetTaskByID(ctx, id, userID any) *MockTaskServiceGetTaskByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskByID", reflect.TypeOf((*MockTaskService)(nil).GetTaskByID), ctx, id, userID)
	return &MockTaskServiceGetTaskByIDCall{Call: call}
}

// MockTaskServiceGetTaskByIDCall wrap *gomock.Call
type MockTaskServiceGetTaskByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTaskServiceGetTaskByIDCall) Return(arg0 task_model.GetTaskResponse, arg1 error) *MockTaskServiceGetTaskByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTaskServiceGetTaskByIDCall) Do(f func(context.Context, string, string) (task_model.GetTaskResponse, error)) *MockTaskServiceGetTaskByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTaskServiceGetTaskByIDCall) DoAndReturn(f func(context.Context, string, string) (task_model.GetTaskResponse, error)) *MockTaskServiceGetTaskByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateTask mocks base method.
func (m *MockTaskService) UpdateTask(ctx context.Context, id, userID, title, description, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTask", ctx, id, userID, title, description, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTask indicates an expected call of UpdateTask.
func (mr *MockTaskServiceMockRecorder) UpdateTask(ctx, id, userID, title, description, status any) *MockTaskServiceUpdateTaskCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTask", reflect.TypeOf((*MockTaskService)(nil).UpdateTask), ctx, id, userID, title, description, status)
	return &MockTaskServiceUpdateTaskCall{Call: call}
}

// MockTaskServiceUpdateTaskCall wrap *gomock.Call
type MockTaskServiceUpdateTaskCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTaskServiceUpdateTaskCall) Return(arg0 error) *MockTaskServiceUpdateTaskCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTaskServiceUpdateTaskCall) Do(f func(context.Context, string, string, string, string, string) error) *MockTaskServiceUpdateTaskCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTaskServiceUpdateTaskCall) DoAndReturn(f func(context.Context, string, string, string, string, string) error) *MockTaskServiceUpdateTaskCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
