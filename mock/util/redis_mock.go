// Code generated by MockGen. DO NOT EDIT.
// Source: util/redis/type.go
//
// Generated by this command:
//
//	mockgen -package=mock_util -source=util/redis/type.go -destination=mock/util/redis_mock.go -typed
//

// Package mock_util is a generated GoMock package.
package mock_util

import (
	reflect "reflect"

	redis "github.com/redis/go-redis/v9"
	gomock "go.uber.org/mock/gomock"
)

// MockRedisManager is a mock of RedisManager interface.
type MockRedisManager struct {
	ctrl     *gomock.Controller
	recorder *MockRedisManagerMockRecorder
	isgomock struct{}
}

// MockRedisManagerMockRecorder is the mock recorder for MockRedisManager.
type MockRedisManagerMockRecorder struct {
	mock *MockRedisManager
}

// NewMockRedisManager creates a new mock instance.
func NewMockRedisManager(ctrl *gomock.Controller) *MockRedisManager {
	mock := &MockRedisManager{ctrl: ctrl}
	mock.recorder = &MockRedisManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisManager) EXPECT() *MockRedisManagerMockRecorder {
	return m.recorder
}

// Client mocks base method.
func (m *MockRedisManager) Client() *redis.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client")
	ret0, _ := ret[0].(*redis.Client)
	return ret0
}

// Client indicates an expected call of Client.
func (mr *MockRedisManagerMockRecorder) Client() *MockRedisManagerClientCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockRedisManager)(nil).Client))
	return &MockRedisManagerClientCall{Call: call}
}

// MockRedisManagerClientCall wrap *gomock.Call
type MockRedisManagerClientCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRedisManagerClientCall) Return(arg0 *redis.Client) *MockRedisManagerClientCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRedisManagerClientCall) Do(f func() *redis.Client) *MockRedisManagerClientCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRedisManagerClientCall) DoAndReturn(f func() *redis.Client) *MockRedisManagerClientCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Close mocks base method.
func (m *MockRedisManager) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRedisManagerMockRecorder) Close() *MockRedisManagerCloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRedisManager)(nil).Close))
	return &MockRedisManagerCloseCall{Call: call}
}

// MockRedisManagerCloseCall wrap *gomock.Call
type MockRedisManagerCloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRedisManagerCloseCall) Return(arg0 error) *MockRedisManagerCloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRedisManagerCloseCall) Do(f func() error) *MockRedisManagerCloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRedisManagerCloseCall) DoAndReturn(f func() error) *MockRedisManagerCloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
